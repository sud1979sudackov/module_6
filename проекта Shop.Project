-- –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ category_id –¥–ª—è —Å–≤—è–∑–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
ALTER TABLE Products ADD COLUMN category_id INT NULL;
ALTER TABLE Products ADD CONSTRAINT FK_Products_Categories 
FOREIGN KEY (category_id) REFERENCES Categories(id);

-- –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
CREATE TABLE SimilarProducts (
    id INT PRIMARY KEY IDENTITY(1,1),
    product_id INT NOT NULL,
    similar_product_id INT NOT NULL,
    similarity_score DECIMAL(5,4) DEFAULT 1.0,
    created_at DATETIME2 DEFAULT GETDATE(),
    FOREIGN KEY (product_id) REFERENCES Products(id),
    FOREIGN KEY (similar_product_id) REFERENCES Products(id),
    CONSTRAINT CHK_DifferentProducts CHECK (product_id != similar_product_id)
);
1.2. Shop.API –∏–∑–º–µ–Ω–µ–Ω–∏—è
SimilarProductsController.cs

csharp
[ApiController]
[Route("api/[controller]")]
public class SimilarProductsController : ControllerBase
{
    private readonly ISimilarProductService _similarProductService;

    public SimilarProductsController(ISimilarProductService similarProductService)
    {
        _similarProductService = similarProductService;
    }

    [HttpGet("{productId}")]
    public async Task<IActionResult> GetSimilarProducts(int productId, [FromQuery] int limit = 5)
    {
        var similarProducts = await _similarProductService.GetSimilarProductsAsync(productId, limit);
        return Ok(similarProducts);
    }

    [HttpPost("generate")]
    public async Task<IActionResult> GenerateSimilarProducts()
    {
        await _similarProductService.GenerateSimilarProductsAsync();
        return Ok(new { message = "Similar products generated successfully" });
    }
}
ISimilarProductService.cs

csharp
public interface ISimilarProductService
{
    Task<IEnumerable<ProductDto>> GetSimilarProductsAsync(int productId, int limit = 5);
    Task GenerateSimilarProductsAsync();
    Task CalculateSimilarityForProductAsync(int productId);
}
SimilarProductService.cs

csharp
public class SimilarProductService : ISimilarProductService
{
    private readonly IProductRepository _productRepository;
    private readonly ISimilarProductRepository _similarProductRepository;

    public SimilarProductService(IProductRepository productRepository, 
                               ISimilarProductRepository similarProductRepository)
    {
        _productRepository = productRepository;
        _similarProductRepository = similarProductRepository;
    }

    public async Task<IEnumerable<ProductDto>> GetSimilarProductsAsync(int productId, int limit = 5)
    {
        var similarProductIds = await _similarProductRepository
            .GetSimilarProductIdsAsync(productId, limit);
        
        var products = await _productRepository.GetProductsByIdsAsync(similarProductIds);
        return products.Select(p => MapToDto(p));
    }

    public async Task GenerateSimilarProductsAsync()
    {
        var allProducts = await _productRepository.GetAllProductsAsync();
        
        foreach (var product in allProducts)
        {
            await CalculateSimilarityForProductAsync(product.Id);
        }
    }

    public async Task CalculateSimilarityForProductAsync(int productId)
    {
        var currentProduct = await _productRepository.GetProductByIdAsync(productId);
        var otherProducts = await _productRepository.GetProductsByCategoryAsync(currentProduct.CategoryId);
        
        foreach (var otherProduct in otherProducts.Where(p => p.Id != productId))
        {
            var similarity = CalculateSimilarity(currentProduct, otherProduct);
            
            if (similarity > 0.3m) // –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏
            {
                await _similarProductRepository.AddSimilarProductAsync(
                    productId, otherProduct.Id, similarity);
            }
        }
    }

    private decimal CalculateSimilarity(Product product1, Product product2)
    {
        // –ê–ª–≥–æ—Ä–∏—Ç–º –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ö–æ–∂–µ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ:
        // - –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        // - —Ü–µ–Ω—ã (–¥–∏–∞–ø–∞–∑–æ–Ω)
        // - —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        // - —Ç–µ–≥–æ–≤
        decimal score = 0m;
        
        if (product1.CategoryId == product2.CategoryId) score += 0.4m;
        
        // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω –≤ –æ–¥–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        var priceRatio = Math.Min(product1.Price, product2.Price) / 
                        Math.Max(product1.Price, product2.Price);
        score += (decimal)priceRatio * 0.3m;
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫...
        
        return Math.Min(score, 1.0m);
    }

    private ProductDto MapToDto(Product product) => new()
    {
        Id = product.Id,
        Name = product.Name,
        Price = product.Price,
        // ... –¥—Ä—É–≥–∏–µ –ø–æ–ª—è
    };
}
üéØ –ó–∞–¥–∞—á–∞ 2: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∞–¥–º–∏–Ω–∫–µ
2.1. Shop.API –∏–∑–º–µ–Ω–µ–Ω–∏—è
ProductsController.cs (–¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥)

csharp
[HttpPost]
[Authorize(Roles = "Admin")]
public async Task<IActionResult> CreateProduct([FromBody] CreateProductRequest request)
{
    if (!ModelState.IsValid)
        return BadRequest(ModelState);

    try
    {
        var product = new Product
        {
            Name = request.Name,
            Description = request.Description,
            Price = request.Price,
            CategoryId = request.CategoryId,
            StockQuantity = request.StockQuantity,
            IsActive = request.IsActive,
            CreatedAt = DateTime.UtcNow
        };

        await _productRepository.AddProductAsync(product);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        await _similarProductService.CalculateSimilarityForProductAsync(product.Id);

        return CreatedAtAction(nameof(GetProduct), 
            new { id = product.Id }, 
            MapToDto(product));
    }
    catch (Exception ex)
    {
        return StatusCode(500, new { message = "Error creating product", error = ex.Message });
    }
}
CreateProductRequest.cs

csharp
public class CreateProductRequest
{
    [Required]
    [StringLength(100)]
    public string Name { get; set; }

    [StringLength(500)]
    public string Description { get; set; }

    [Range(0.01, double.MaxValue)]
    public decimal Price { get; set; }

    public int? CategoryId { get; set; }

    [Range(0, int.MaxValue)]
    public int StockQuantity { get; set; }

    public bool IsActive { get; set; } = true;
}
2.2. Shop.Admin –∏–∑–º–µ–Ω–µ–Ω–∏—è
CreateProduct.razor

razor
@page "/admin/products/create"
@using Shop.Shared.Dtos
@inject IProductService ProductService
@inject NavigationManager NavigationManager

<h3>Create New Product</h3>

<EditForm Model="@Product" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Product Name</label>
        <InputText id="name" @bind-Value="@Product.Name" class="form-control" />
        <ValidationMessage For="@(() => Product.Name)" />
    </div>

    <div class="form-group">
        <label for="description">Description</label>
        <InputTextArea id="description" @bind-Value="@Product.Description" class="form-control" />
    </div>

    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber id="price" @bind-Value="@Product.Price" class="form-control" />
        <ValidationMessage For="@(() => Product.Price)" />
    </div>

    <div class="form-group">
        <label for="category">Category</label>
        <InputSelect id="category" @bind-Value="@Product.CategoryId" class="form-control">
            <option value="">Select Category</option>
            @foreach (var category in Categories)
            {
                <option value="@category.Id">@category.Name</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="stock">Stock Quantity</label>
        <InputNumber id="stock" @bind-Value="@Product.StockQuantity" class="form-control" />
    </div>

    <div class="form-check">
        <InputCheckbox id="active" @bind-Value="@Product.IsActive" class="form-check-input" />
        <label for="active" class="form-check-label">Active</label>
    </div>

    <button type="submit" class="btn btn-primary">Create Product</button>
    <button type="button" class="btn btn-secondary" @onclick="@Cancel">Cancel</button>
</EditForm>

@code {
    private CreateProductRequest Product { get; set; } = new();
    private List<CategoryDto> Categories { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è dropdown
        Categories = await ProductService.GetCategoriesAsync();
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var createdProduct = await ProductService.CreateProductAsync(Product);
            NavigationManager.NavigateTo($"/admin/products/{createdProduct.Id}");
        }
        catch (Exception ex)
        {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            Console.WriteLine($"Error creating product: {ex.Message}");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/admin/products");
    }
}
üéØ –ó–∞–¥–∞—á–∞ 3: Shop.Client –Ω–∞ React
3.1. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
text
Shop.Client/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ProductList/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ProductCard/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ SimilarProducts/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Header/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Footer/
‚îÇ   ‚îú‚îÄ‚îÄ pages/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Home/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ProductDetail/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Category/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Cart/
‚îÇ   ‚îú‚îÄ‚îÄ services/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ api.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ productService.js
‚îÇ   ‚îú‚îÄ‚îÄ store/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ slices/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ productsSlice.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ cartSlice.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.js
‚îÇ   ‚îú‚îÄ‚îÄ App.js
‚îÇ   ‚îî‚îÄ‚îÄ index.js
‚îú‚îÄ‚îÄ package.json
‚îî‚îÄ‚îÄ vite.config.js
3.2. –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
ProductCard.jsx

jsx
import React from 'react';
import { useNavigate } from 'react-router-dom';
import './ProductCard.css';

const ProductCard = ({ product }) => {
  const navigate = useNavigate();

  const handleClick = () => {
    navigate(`/product/${product.id}`);
  };

  return (
    <div className="product-card" onClick={handleClick}>
      <img src={product.imageUrl || '/placeholder-product.jpg'} alt={product.name} />
      <h3>{product.name}</h3>
      <p className="price">${product.price}</p>
      <button className="add-to-cart-btn">Add to Cart</button>
    </div>
  );
};

export default ProductCard;
SimilarProducts.jsx

jsx
import React, { useEffect, useState } from 'react';
import { getSimilarProducts } from '../services/productService';
import ProductCard from './ProductCard';
import './SimilarProducts.css';

const SimilarProducts = ({ productId }) => {
  const [similarProducts, setSimilarProducts] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchSimilarProducts = async () => {
      try {
        const products = await getSimilarProducts(productId);
        setSimilarProducts(products);
      } catch (error) {
        console.error('Error fetching similar products:', error);
      } finally {
        setLoading(false);
      }
    };

    if (productId) {
      fetchSimilarProducts();
    }
  }, [productId]);

  if (loading) return <div>Loading similar products...</div>;
  if (similarProducts.length === 0) return null;

  return (
    <div className="similar-products">
      <h3>Similar Products</h3>
      <div className="similar-products-grid">
        {similarProducts.map(product => (
          <ProductCard key={product.id} product={product} />
        ))}
      </div>
    </div>
  );
};

export default SimilarProducts;
ProductDetail.jsx

jsx
import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import { getProductById } from '../services/productService';
import SimilarProducts from '../components/SimilarProducts/SimilarProducts';
import './ProductDetail.css';

const ProductDetail = () => {
  const { id } = useParams();
  const [product, setProduct] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchProduct = async () => {
      try {
        const productData = await getProductById(id);
        setProduct(productData);
      } catch (error) {
        console.error('Error fetching product:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchProduct();
  }, [id]);

  if (loading) return <div>Loading...</div>;
  if (!product) return <div>Product not found</div>;

  return (
    <div className="product-detail">
      <div className="product-main">
        <img src={product.imageUrl} alt={product.name} />
        <div className="product-info">
          <h1>{product.name}</h1>
          <p className="price">${product.price}</p>
          <p className="description">{product.description}</p>
          <button className="add-to-cart-btn">Add to Cart</button>
        </div>
      </div>
      
      <SimilarProducts productId={product.id} />
    </div>
  );
};

export default ProductDetail;
3.3. –°–µ—Ä–≤–∏—Å—ã API
productService.js

javascript
import { api } from './api';

export const productService = {
  async getProducts() {
    const response = await api.get('/products');
    return response.data;
  },

  async getProductById(id) {
    const response = await api.get(`/products/${id}`);
    return response.data;
  },

  async getSimilarProducts(productId) {
    const response = await api.get(`/similarproducts/${productId}`);
    return response.data;
  },

  async createProduct(productData) {
    const response = await api.post('/products', productData);
    return response.data;
  }
};
3.4. Redux Store
productsSlice.js

javascript
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { productService } from '../../services/productService';

export const fetchProducts = createAsyncThunk(
  'products/fetchProducts',
  async () => {
    const response = await productService.getProducts();
    return response;
  }
);

const productsSlice = createSlice({
  name: 'products',
  initialState: {
    items: [],
    loading: false,
    error: null
  },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchProducts.pending, (state) => {
        state.loading = true;
      })
      .addCase(fetchProducts.fulfilled, (state, action) => {
        state.loading = false;
        state.items = action.payload;
      })
      .addCase(fetchProducts.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message;
      });
  }
});

export default productsSlice.reducer;
3.5. package.json –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
json
{
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.8.0",
    "@reduxjs/toolkit": "^1.9.0",
    "react-redux": "^8.0.0",
    "axios": "^1.0.0"
  },
  "devDependencies": {
    "vite": "^4.0.0",
    "@vitejs/plugin-react": "^3.0.0"
  }
}
üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
–ó–∞–ø—É—Å–∫ Shop.API:

bash
cd Shop.API
dotnet run
–ó–∞–ø—É—Å–∫ Shop.Admin:

bash
cd Shop.Admin
dotnet run
–ó–∞–ø—É—Å–∫ Shop.Client:

bash
cd Shop.Client
npm install
npm run dev
