# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å Vite
npm create vite@latest flight-search-app -- --template react-ts
cd flight-search-app

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
npm install @reduxjs/toolkit react-redux axios
npm install @types/react-redux

# –ó–∞–ø—É—Å–∫ development —Å–µ—Ä–≤–µ—Ä–∞
npm run dev
text
flight-search-app/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ FlightList/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ FlightList.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ FlightList.module.css
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Filters/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Filters.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AirlinesFilter.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ StopsFilter.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Filters.module.css
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Sort/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Sort.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Sort.module.css
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Loading/
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ Loading.tsx
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ Loading.module.css
‚îÇ   ‚îú‚îÄ‚îÄ store/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ slices/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ flightsSlice.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ filtersSlice.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ api/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ flightsApi.ts
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.ts
‚îÇ   ‚îú‚îÄ‚îÄ types/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.ts
‚îÇ   ‚îú‚îÄ‚îÄ hooks/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ useAppSelector.ts
‚îÇ   ‚îú‚îÄ‚îÄ App.tsx
‚îÇ   ‚îú‚îÄ‚îÄ App.module.css
‚îÇ   ‚îî‚îÄ‚îÄ main.tsx
‚îú‚îÄ‚îÄ package.json
‚îî‚îÄ‚îÄ vite.config.ts
export interface Flight {
  id: string;
  price: number;
  duration: number;
  stops: number;
  airline: string;
  departure: string;
  arrival: string;
  departureTime: string;
  arrivalTime: string;
}

export interface Filters {
  airlines: string[];
  stops: number[];
  sortBy: 'price' | 'duration' | 'stops';
}

export interface FlightsState {
  flights: Flight[];
  filteredFlights: Flight[];
  loading: boolean;
  error: string | null;
}
mport { configureStore } from '@reduxjs/toolkit';
import { flightsApi } from './api/flightsApi';
import filtersReducer from './slices/filtersSlice';

export const store = configureStore({
  reducer: {
    [flightsApi.reducerPath]: flightsApi.reducer,
    filters: filtersReducer,
  },
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware().concat(flightsApi.middleware),
});

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;
API —Å async thunk (store/api/flightsApi.ts)
typescript
import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';
import { Flight } from '../../types';

export const flightsApi = createApi({
  reducerPath: 'flightsApi',
  baseQuery: fetchBaseQuery({ baseUrl: 'http://localhost:3001/api' }),
  endpoints: (builder) => ({
    getFlights: builder.query<Flight[], void>({
      query: () => '/flights',
    }),
  }),
});

export const { useGetFlightsQuery } = flightsApi;
typescript
import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { Filters } from '../../types';

const initialState: Filters = {
  airlines: [],
  stops: [],
  sortBy: 'price',
};

const filtersSlice = createSlice({
  name: 'filters',
  initialState,
  reducers: {
    setAirlinesFilter: (state, action: PayloadAction<string[]>) => {
      state.airlines = action.payload;
    },
    setStopsFilter: (state, action: PayloadAction<number[]>) => {
      state.stops = action.payload;
    },
    setSortBy: (state, action: PayloadAction<'price' | 'duration' | 'stops'>) => {
      state.sortBy = action.payload;
    },
    resetFilters: () => initialState,
  },
});

export const { setAirlinesFilter, setStopsFilter, setSortBy, resetFilters } = filtersSlice.actions;
export default filtersSlice.reducer;
typescript
import { TypedUseSelectorHook, useSelector } from 'react-redux';
import { RootState } from '../store';

export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;
typescript
import React from 'react';
import { Provider } from 'react-redux';
import { store } from './store';
import FlightList from './components/FlightList/FlightList';
import Filters from './components/Filters/Filters';
import Sort from './components/Sort/Sort';
import styles from './App.module.css';

function App() {
  return (
    <Provider store={store}>
      <div className={styles.app}>
        <header className={styles.header}>
          <h1>–ü–æ–∏—Å–∫ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤</h1>
        </header>
        <main className={styles.main}>
          <aside className={styles.sidebar}>
            <Filters />
          </aside>
          <section className={styles.content}>
            <Sort />
            <FlightList />
          </section>
        </main>
      </div>
    </Provider>
  );
}

export default App;
üìã –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –±–∏–ª–µ—Ç–æ–≤ (components/FlightList/FlightList.tsx)
typescript
import React, { useMemo } from 'react';
import { useGetFlightsQuery } from '../../store/api/flightsApi';
import { useAppSelector } from '../../hooks/useAppSelector';
import { Flight } from '../../types';
import Loading from '../Loading/Loading';
import styles from './FlightList.module.css';

const FlightList: React.FC = () => {
  const { data: flights = [], error, isLoading } = useGetFlightsQuery();
  const { airlines, stops, sortBy } = useAppSelector((state) => state.filters);

  const filteredAndSortedFlights = useMemo(() => {
    let result = [...flights];

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è–º
    if (airlines.length > 0) {
      result = result.filter(flight => airlines.includes(flight.airline));
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–µ—Ä–µ—Å–∞–¥–∫–∞–º
    if (stops.length > 0) {
      result = result.filter(flight => stops.includes(flight.stops));
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    result.sort((a, b) => {
      switch (sortBy) {
        case 'price':
          return a.price - b.price;
        case 'duration':
          return a.duration - b.duration;
        case 'stops':
          return a.stops - b.stops;
        default:
          return 0;
      }
    });

    return result;
  }, [flights, airlines, stops, sortBy]);

  if (isLoading) return <Loading />;
  if (error) return <div>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</div>;

  return (
    <div className={styles.flightList}>
      {filteredAndSortedFlights.map(flight => (
        <div key={flight.id} className={styles.flightCard}>
          <div className={styles.airline}>{flight.airline}</div>
          <div className={styles.route}>
            <span>{flight.departure} ‚Üí {flight.arrival}</span>
            <span>{flight.departureTime} - {flight.arrivalTime}</span>
          </div>
          <div className={styles.details}>
            <span>–í –ø—É—Ç–∏: {Math.floor(flight.duration / 60)}—á {flight.duration % 60}–º</span>
            <span>–ü–µ—Ä–µ—Å–∞–¥–æ–∫: {flight.stops}</span>
          </div>
          <div className={styles.price}>{flight.price} ‚ÇΩ</div>
        </div>
      ))}
    </div>
  );
};

export default FlightList;
 –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ (components/Filters/Filters.tsx)
typescript
import React from 'react';
import { useAppSelector, useAppDispatch } from '../../hooks/useAppSelector';
import { setAirlinesFilter, setStopsFilter } from '../../store/slices/filtersSlice';
import AirlinesFilter from './AirlinesFilter';
import StopsFilter from './StopsFilter';
import styles from './Filters.module.css';

const Filters: React.FC = () => {
  const dispatch = useAppDispatch();
  const { airlines: selectedAirlines, stops: selectedStops } = useAppSelector((state) => state.filters);

  const handleAirlinesChange = (airlines: string[]) => {
    dispatch(setAirlinesFilter(airlines));
  };

  const handleStopsChange = (stops: number[]) => {
    dispatch(setStopsFilter(stops));
  };

  return (
    <div className={styles.filters}>
      <h3>–§–∏–ª—å—Ç—Ä—ã</h3>
      
      <AirlinesFilter
        selectedAirlines={selectedAirlines}
        onChange={handleAirlinesChange}
      />
      
      <StopsFilter
        selectedStops={selectedStops}
        onChange={handleStopsChange}
      />
    </div>
  );
};

export default Filters;
 –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (components/Sort/Sort.tsx)
typescript
import React from 'react';
import { useAppSelector, useAppDispatch } from '../../hooks/useAppSelector';
import { setSortBy } from '../../store/slices/filtersSlice';
import styles from './Sort.module.css';

const Sort: React.FC = () => {
  const dispatch = useAppDispatch();
  const { sortBy } = useAppSelector((state) => state.filters);

  const handleSortChange = (value: 'price' | 'duration' | 'stops') => {
    dispatch(setSortBy(value));
  };

  return (
    <div className={styles.sort}>
      <h3>–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞</h3>
      <div className={styles.sortOptions}>
        <button
          className={`${styles.sortButton} ${sortBy === 'price' ? styles.active : ''}`}
          onClick={() => handleSortChange('price')}
        >
          –ü–æ —Ü–µ–Ω–µ
        </button>
        <button
          className={`${styles.sortButton} ${sortBy === 'duration' ? styles.active : ''}`}
          onClick={() => handleSortChange('duration')}
        >
          –ü–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        </button>
        <button
          className={`${styles.sortButton} ${sortBy === 'stops' ? styles.active : ''}`}
          onClick={() => handleSortChange('stops')}
        >
          –ü–æ –ø–µ—Ä–µ—Å–∞–¥–∫–∞–º
        </button>
      </div>
    </div>
  );
};

export default Sort;
 –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ (App.module.css)
css
.app {
  min-height: 100vh;
  background-color: #f5f5f5;
}

.header {
  background: #1976d2;
  color: white;
  padding: 1rem;
  text-align: center;
}

.main {
  display: grid;
  grid-template-columns: 300px 1fr;
  gap: 20px;
  padding: 20px;
  max-width: 1200px;
  margin: 0 auto;
}

.sidebar {
  background: white;
  padding: 1rem;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.content {
  background: white;
  padding: 1rem;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

@media (max-width: 768px) {
  .main {
    grid-template-columns: 1fr;
  }
  
  .sidebar {
    order: 2;
  }
  
  .content {
    order: 1;
  }
}
 –ó–∞–ø—É—Å–∫ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫:

bash
npm install
npm run dev
Mock server (–¥–æ–±–∞–≤—å—Ç–µ –≤ package.json):

json
{
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview",
    "server": "json-server --watch db.json --port 3001"
  }
}
db.json –¥–ª—è mock –¥–∞–Ω–Ω—ã—Ö:

json
{
  "flights": [
    {
      "id": "1",
      "price": 12000,
      "duration": 180,
      "stops": 1,
      "airline": "Aeroflot",
      "departure": "Moscow",
      "arrival": "Sochi",
      "departureTime": "08:00",
      "arrivalTime": "11:00"
    },
    {
      "id": "2",
      "price": 8500,
      "duration": 240,
      "stops": 2,
      "airline": "S7",
      "departure": "Moscow",
      "arrival": "Sochi",
      "departureTime": "12:00",
      "arrivalTime": "16:00"
    }
  ]
}
